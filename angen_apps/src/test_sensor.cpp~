#include "ros/ros.h"
#include <fstream>
#include <iostream>
#include <math.h>
#include "std_msgs/String.h"
#include "std_msgs/UInt8.h"
#include "std_msgs/Float64MultiArray.h"
#include "std_msgs/MultiArrayDimension.h"
#include "geometry_msgs/PoseStamped.h"
#include "geometry_msgs/Twist.h"
#include <ros/callback_queue.h>
#include "gazebo_plugins/gazebo_ros_bumper.h"
#include <sstream>
#include <string>
#include "gazebo_msgs/ContactState.h"
#include "gazebo_msgs/ContactsState.h"

using namespace std;

class test_sensor
{
        ros::Subscriber sensor_data;
        ros::NodeHandle sensor_handle;
   
   public:
        test_sensor() { sensor_data = sensor_handle.subscribe("/contact_bumper/state", 1000, &test_sensor::callback, this); }
        void callback(const gazebo_msgs::ContactsState::ConstPtr&);
        
};

void test_sensor::callback(const gazebo_msgs::ContactsState::ConstPtr& DetectState)
{       
        if(((DetectState->states[0].geom1_name.compare("left_wheel_link_geom"))))
           cout<<"Contact with the robot"<<endl;
        else  
           cout<<"No contact with the robot"<<endl;  
}           	

int main(int argc, char **argv)
{
        ros::init(argc, argv, "test_sensor");
        test_sensor sensor;
        //ros::Subscriber sensor_data;
        //ros::NodeHandle sensor_handle;
        //sensor_data = sensor_handle.subscribe("/contact_bumper/state", 1000, callback);
        ros::spin();
        return 0;
}        

          
                
 	
 		
