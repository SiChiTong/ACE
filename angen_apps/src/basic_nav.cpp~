#include "ros/ros.h"
#include <fstream>
#include <iostream>
#include <math.h>
#include "std_msgs/String.h"
#include "std_msgs/UInt8.h"
#include "std_msgs/Float64MultiArray.h"
#include "std_msgs/MultiArrayDimension.h"
#include "geometry_msgs/PoseStamped.h"
#include "geometry_msgs/Twist.h"
#include "move_base_msgs/MoveBaseActionGoal.h"
#include <ros/callback_queue.h>
#include "robot_navigation_/service1_param.h"
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#define POINTS 3
#define TOTAL_GOALS 5

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;


static bool COMPLETE = false;

	
using namespace ros;
using namespace std;

class KeyHandler
{
	ros::Subscriber key_getter;
	ros::NodeHandle nodeh;
	uint8_t place_key;
	
	int s;
	int count1;
	ifstream a_file;
	
	static int current_point;
	static bool is_key_there;
	static bool ticket;
	static bool task_complete;
	
	struct dictionary
	{
	
		float a[POINTS][7];
		char key;
				
	}dict[TOTAL_GOALS];
	
 public:	
	
 	KeyHandler()
 	{
 		key_getter = nodeh.subscribe("destination_key", 1, &KeyHandler::callback, this);
 		place_key = 'e';
 	} 
 	
 	uint8_t get_place_key() { return place_key; }
 	static int get_current_point() { return KeyHandler::current_point; }
 	static bool get_ticket() { return KeyHandler::ticket; }
 	static bool get_is_key_there() { return KeyHandler::is_key_there; }
 	static bool get_task_complete() { return KeyHandler::task_complete; }
 	
 	static void reset_task_complete() { task_complete = false; }
 	static void set_task_complete() { task_complete = true; }
 	static void inc_current_point() { KeyHandler::current_point++; }
 	static void reset_current_point() { KeyHandler::current_point = 0; }
	static void reset_ticket() { ticket = false; }
 	static void set_ticket() { ticket = true; }
	static void reset_is_key_there() { is_key_there = false; }
 	static void set_is_key_there() { is_key_there = true; }
 	
 	float get_point_variable(int c, int b);
 	
 	void callback(const std_msgs::UInt8::ConstPtr&);
 	
 	void extract()
 	{
 		std::string filename = "goals.inputfile";
 		a_file.open(filename.c_str());
 		if(!a_file.is_open())
 		{ 
 			printf("ERROR OPENING FILE... Please ensure that the file, \"%s\" is there in the directory from which you 'make' the package. Press a key to exit.",  filename.c_str());
 			getchar();
	 		exit(0);
	 	}	 	
	 	
	 	for(int goal = 0; goal < TOTAL_GOALS; goal++)
	 	{
	 		a_file>>dict[goal].key;
	 	
 			for(count1=0;count1<POINTS; count1++)
 			{
				a_file>>(s);
				for(int i =0; i<7; i++)
				{				
					a_file>>dict[goal].a[count1][i];
					ROS_INFO("%f*******", dict[goal].a[count1][i]);
				}	
			}
		}	
	}	
};

float KeyHandler::get_point_variable(int c, int b)
{
 	return dict[place_key-97].a[c][b];
}


int KeyHandler::current_point = 0;
bool KeyHandler::is_key_there = false;
bool KeyHandler::ticket = false;
bool KeyHandler::task_complete = true;


void KeyHandler::callback(const std_msgs::UInt8::ConstPtr& key)
{
	if(KeyHandler::task_complete)
	{
		KeyHandler::is_key_there = true;	
		KeyHandler::ticket = true;
		KeyHandler::reset_current_point();
		KeyHandler::task_complete = false;
		place_key = key->data;  
		ROS_INFO("THE KEY IS: %c", place_key);
	}	
} 


/**************************************************************************************************************************************************************************/


class Select
{
	std_msgs::Float64MultiArray point;
	MoveBaseClient ac;
	
	KeyHandler FR;
  public:
	uint8_t get_place_key();
        void extract() { FR.extract(); }
        void publish_points();
        void init_points();
        
        void callback(const move_base_msgs::MoveBaseFeedbackConstPtr& );
        Select() : ac("move_base", true)
        {          
        }
        void done(const actionlib::SimpleClientGoalState& state, const move_base_msgs::MoveBaseResultConstPtr& result)
	{
  		ROS_INFO("Finished in state [%s]", state.toString().c_str());
	} 
	// Called once when the goal becomes active

	void active()
	{
  		ROS_INFO("Goal just went active");
	}
};        

void Select::callback(const move_base_msgs::MoveBaseFeedbackConstPtr& feedback)
{
	if(KeyHandler::get_is_key_there())
	{
		if((POINTS - KeyHandler::get_current_point()) == 1)
		{
			ROS_INFO("CHECKING ROBOT POSE...");
			if((abs(feedback->base_position.pose.position.x - point.data[0]) < 0.2) &&
			   (abs(feedback->base_position.pose.position.y - point.data[1]) < 0.2) )
			   {
			   	//actionlib_msgs::GoalID current_goal_id;
			   	//current_goal_id.id = "current_goal" + string(1,48+KeyHandler::get_current_point());
			   	ac.cancelGoal();
				ROS_INFO("SENT!");
			   	ROS_INFO("Navigazon completes here... Enzoi!");
				ROS_INFO("MARKER VALUE: %d", KeyHandler::get_current_point());
			   		
			   		
			   		ROS_INFO("TASK COMPLETE!");
			   		COMPLETE = true;
					KeyHandler::set_task_complete();
			   		KeyHandler::reset_is_key_there();
					KeyHandler::reset_current_point();
		   			
			   }
		}	   
			   
		else
		{
			ROS_INFO("CHECKING ROBOT POSE...");
			if((abs(feedback->base_position.pose.position.x - point.data[0]) < 0.2) &&
			   (abs(feedback->base_position.pose.position.y - point.data[1]) < 0.2))
			   {
			   	//actionlib_msgs::GoalID current_goal_id;
			   	//current_goal_id.id = "current_goal" + string(1,48+KeyHandler::get_current_point());
			   	ac.cancelGoal();
				ROS_INFO("SENT!");
			   	ROS_INFO("Proceeding to the next point...");
				ROS_INFO("MARKER VALUE: %d", KeyHandler::get_current_point());
			   	if(POINTS-(KeyHandler::get_current_point())>1)
			   	{
			   	 	KeyHandler::inc_current_point();
			   	 	KeyHandler::set_ticket();
			   	}  		
		   			
			   }
		}
	}
}	

uint8_t Select::get_place_key()
{
	return FR.get_place_key();
}		
void Select::publish_points()
{
	this->init_points();
		
	move_base_msgs::MoveBaseGoal goal;

	goal.target_pose.header.frame_id = "map";
  	goal.target_pose.header.stamp = ros::Time::now();

  	goal.target_pose.pose.position.x = point.data[0];
  	goal.target_pose.pose.position.y = point.data[1];
	goal.target_pose.pose.position.z = point.data[2];
	goal.target_pose.pose.orientation.x = point.data[3];
	goal.target_pose.pose.orientation.y = point.data[4];
	goal.target_pose.pose.orientation.z = point.data[5];
	goal.target_pose.pose.orientation.w = point.data[6];

  	//ROS_INFO("*******************************************");
	//ROS_INFO("Sending TurtleBot to Goal... Please Wait...");
  	ac.sendGoal(goal, boost::bind(&Select::done, this, _1, _2), boost::bind(&Select::active, this), boost::bind(&Select::callback, this, _1));
	//ROS_INFO("*******************************************");
		
	KeyHandler::reset_ticket();
	ac.waitForResult();
}    

void Select::init_points()
{
	int current_point_temp = KeyHandler::get_current_point();
	point.set_data_size(7);
	int cnt = 7;
	while(cnt--) point.data[cnt] = FR.get_point_variable(current_point_temp, cnt);
}	


class service1
{
	ros::ServiceServer service;
	NodeHandle nodeh;
 public:
 	service1()
 	{
 		service = nodeh.advertiseService("service1", &service1::do_work, this);
 	}
 	bool do_work(robot_navigation::service1_param::Request &, robot_navigation::service1_param::Response &);
};
    	 
int main(int argc, char **argv)
{
	ros::init(argc, argv, "key_based_nav");
	service1 SERVICE1;
	ros::spin();
}

bool service1::do_work(robot_navigation::service1_param::Request  &req, robot_navigation::service1_param::Response &res)
{	
	Select sel;
	sel.extract();
	
	while(ros::ok() && !COMPLETE)
	{
		if(KeyHandler::get_is_key_there())
		{
			if(KeyHandler::get_ticket())
			{
				if(sel.get_place_key() == 'e')				
				{
                                        KeyHandler::reset_ticket();
                                        KeyHandler::reset_is_key_there();
                                        KeyHandler::set_task_complete();
                                        ROS_INFO("INVALID GESTURE");
                                }

				else
				{	
					sel.publish_points();
					continue;
				}	
			}	
		}
		else
		{
			ROS_INFO("AWAITING KEY");
			ROS_INFO("KEY STATUS: %d", KeyHandler::get_is_key_there());
			ROS_INFO("TICKET STATUS: %d", KeyHandler::get_ticket());
		}
		ros::getGlobalCallbackQueue()->callAvailable(ros::WallDuration(1.0));	
	}	
	res.Key = sel.get_place_key();
	COMPLETE = false;
	KeyHandler::reset_is_key_there();
	KeyHandler::set_task_complete();
	KeyHandler::reset_ticket();
	res.Status = true;
        return true;
}
