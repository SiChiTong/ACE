"""autogenerated by genpy from angen_turtlebot/service2_paramRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class service2_paramRequest(genpy.Message):
  _md5sum = "099211e31a9f1cefb80592f7f70b89cd"
  _type = "angen_turtlebot/service2_paramRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 wait_time
bool will_shake
bool is_straight_line

"""
  __slots__ = ['wait_time','will_shake','is_straight_line']
  _slot_types = ['uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wait_time,will_shake,is_straight_line

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(service2_paramRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.wait_time is None:
        self.wait_time = 0
      if self.will_shake is None:
        self.will_shake = False
      if self.is_straight_line is None:
        self.is_straight_line = False
    else:
      self.wait_time = 0
      self.will_shake = False
      self.is_straight_line = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.wait_time, _x.will_shake, _x.is_straight_line))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.wait_time, _x.will_shake, _x.is_straight_line,) = _struct_3B.unpack(str[start:end])
      self.will_shake = bool(self.will_shake)
      self.is_straight_line = bool(self.is_straight_line)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B.pack(_x.wait_time, _x.will_shake, _x.is_straight_line))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 3
      (_x.wait_time, _x.will_shake, _x.is_straight_line,) = _struct_3B.unpack(str[start:end])
      self.will_shake = bool(self.will_shake)
      self.is_straight_line = bool(self.is_straight_line)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B = struct.Struct("<3B")
"""autogenerated by genpy from angen_turtlebot/service2_paramResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class service2_paramResponse(genpy.Message):
  _md5sum = "513e93c68ef2f26ff494445b932bb052"
  _type = "angen_turtlebot/service2_paramResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool Status


"""
  __slots__ = ['Status']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(service2_paramResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Status is None:
        self.Status = False
    else:
      self.Status = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.Status))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.Status,) = _struct_B.unpack(str[start:end])
      self.Status = bool(self.Status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.Status))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.Status,) = _struct_B.unpack(str[start:end])
      self.Status = bool(self.Status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class service2_param(object):
  _type          = 'angen_turtlebot/service2_param'
  _md5sum = '694429f7c3dd2c589b1a96726970a0a2'
  _request_class  = service2_paramRequest
  _response_class = service2_paramResponse
